[{"title":"Principal Component Analysis(主成分分析法)","date":"2017-04-30T06:15:05.000Z","path":"2017/04/30/PCA/","text":"简介Principal Component Analysis(主成分分析法)是机器学习中一种常用的一种线性降维算法。 算法流程 数据预处理 准备训练集:\\(x^{(1)},x^{(2)},…x^{(m)}\\) Feature scaling(特征缩放)/ mean normalization(平均归一化)：$$\\begin{aligned} \\mu_j=\\frac 1 m\\sum_{i=1}^mx_j^{(i)} \\end{aligned}$$ 用\\(x_j-\\mu_j\\)替换每个\\(x_j^{(i)}\\)","tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://azhu.tech/tags/Machine-Learning/"}]},{"title":"t-SNE","date":"2017-04-30T06:14:46.000Z","path":"2017/04/30/t-SNE/","text":"","tags":[]},{"title":"Dimensionality Reduction","date":"2017-04-30T05:31:05.000Z","path":"2017/04/30/Dimensionality-Reduction/","text":"##Dimensionality Reduction(维数约简/降维) ###简介维数约简又称为降维是机器学习中的一种数据处理手段，它的主要作用有如下几点： 数据压缩(降低内存磁盘占用，加速学习速度) 去除噪声的影响 从数据中提取特征以便进行分类 可视化(将数据投影到2-3维空间并绘制，方便直观看到数据分布状况) ###常用算法维数约简有多种常用的算法，这里介绍两种当前比较流行的算法： PCA : [Principal Component Analysis(主成分分析法)] t-SNE ：t-Distributed Stochastic Neighbor Embedding（t-分布随机相邻嵌入法）","tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://azhu.tech/tags/Machine-Learning/"}]},{"title":"在Hexo中使用MathJax","date":"2017-04-06T01:52:14.000Z","path":"2017/04/06/hexo-mathjax/","text":"替换markdown renderer由于Markdown渲染器和latex渲染器冲突，公式中的特殊字符会首先被markdown渲染器转义，导致渲染错误。所以首先替换hexo自带的Markdown渲染器插件。这里推荐 hexo-renderer-kramed 这个插件，作者fork了 hexo-renderer-marked 项目，并且只对MathJax支持进行了改进，其他特性完全一致。 对于hexo 2123$ npm uninstall hexo-renderer-marked --save# for hexo 2$ npm install hexo-renderer-kramed --save 对于hexo 3 的用户由于npm只支持到0.1.4，需要到hexo-renderer-kramed手动clone出0.2.x的版本进行安装 安装MathJax 方法1：手动修改主题使其支持mathjax 在theme的header中插入对MathJax CDN script的引用，并配置inline math 在文章中用inline math插入公式 方法2：安装插件 这里推荐hexo-math，这个插件实现了自动部署MathJax以及添加MathJax Tag。具体内容参见仓库的readme。 安装： 1$ npm install hexo-math --save 初始化： 1$ hexo math install 使用：你可以直接使用 MathJax 的行内公式语法，但要记得在每个特殊符号前加一个\\来将其转义。LaTeX包含大量的像\\这样的特殊字符，这就给手动转义带来了极大的不便。这种情况下，你可以使用 math 的标签来让你解脱。 单行标注： 1\\\\( a = b + c \\\\). 效果： \\( a = b + c \\). 多行标注： 123456$$\\frac&#123;\\partial u&#125;&#123;\\partial t&#125;= h^2 \\left( \\frac&#123;\\partial^2 u&#125;&#123;\\partial x^2&#125; +\\frac&#123;\\partial^2 u&#125;&#123;\\partial y^2&#125; +\\frac&#123;\\partial^2 u&#125;&#123;\\partial z^2&#125;\\right)$$ 效果：$$\\frac{\\partial u}{\\partial t}= h^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} +\\frac{\\partial^2 u}{\\partial y^2} +\\frac{\\partial^2 u}{\\partial z^2}\\right)$$ Tag： 单行 1&#123;% math %&#125;\\cos 2\\theta = \\cos^2 \\theta - \\sin^2 \\theta = 2 \\cos^2 \\theta - 1 &#123;% endmath %&#125; $\\cos 2\\theta = \\cos^2 \\theta - \\sin^2 \\theta = 2 \\cos^2 \\theta - 1$ 多行 1234567&#123;% math %&#125;\\begin&#123;aligned&#125;\\dot&#123;x&#125; &amp; = \\sigma(y-x) \\\\\\dot&#123;y&#125; &amp; = \\rho x - y - xz \\\\\\dot&#123;z&#125; &amp; = -\\beta z + xy\\end&#123;aligned&#125;&#123;% endmath %&#125; $$\\begin{aligned} \\dot{x} &amp; = \\sigma(y-x) \\\\ \\dot{y} &amp; = \\rho x - y - xz \\\\ \\dot{z} &amp; = -\\beta z + xy \\end{aligned}$$ 坑：切勿在_config.yml添加如下插件标签，如果添加了plugins标签，hexo将会不再自动搜索插件，需要自己手动将所有用到的插件添加在plugins中。 12plugins: - hexo-math","tags":[]},{"title":"部署博客的时候遇到的一些坑","date":"2017-04-06T01:52:14.000Z","path":"2017/04/06/hexo-problems/","text":"Hexo 主题无法正确显示如果是使用git进行部署的，需要在静态站点映射的仓库下添加一个[.nojekyll]文件。来禁止使用jekyll。确保git项目仓库名称和用户id一致，否则会导致css文件无法正确加载，无论是用github pages还是coding pages。Test Math x = z*b$ a = b + c $","tags":[]},{"title":"Hexo 简单操作","date":"2017-02-27T16:50:19.000Z","path":"2017/02/28/hexo-quick-start/","text":"Hexo主页文档常见问题GitHub. 创建一篇日志1$ hexo new \"My New Post\" 文档: Writing 运行本地服务，预览1$ hexo server 文档: Server 生成静态文件1$ hexo generate 文档: Generating 发布1$ hexo deploy 文档: Deployment","tags":[]}]